@startuml
actor Application
participant "Proxy Server\n(Queue/DeadQueue)" as Proxy
participant "Kafka Cluster" as Kafka
participant "DB/Analytics\n(Elasticsearch/Splunk)" as DB
participant "Admin UI" as Admin

== 이벤트 로그 전송 및 처리 ==

Application -> Proxy: 이벤트 로그 전송 (어노테이션 적용)
Proxy -> Proxy: Queue에 로그 적재
Proxy -> Kafka: Kafka로 로그 전송 시도
alt 전송 성공
    Kafka -> DB: 로그 저장/분석 시스템 연동 (확장)
else 전송 실패
    Proxy -> Proxy: DeadQueue에 로그 임시 저장
    Proxy -> Proxy: 재전송 스케줄 등록 (최대 5회, 100건)
end

== DeadQueue 재전송 ==

loop 재전송 스케줄
    Proxy -> Kafka: DeadQueue 로그 재전송 시도
    alt 성공
        Kafka -> DB: 로그 저장/분석 시스템 연동
        Proxy -> Proxy: DeadQueue에서 로그 삭제
    else 실패 (최대 5회)
        Proxy -> Proxy: DeadQueue에 유지 (알림/모니터링)
    end
end

== Kafka 장애 복구 ==

Kafka -> Kafka: 리플리케이션/파티션 재조정 (장애 복구)

== Kafka 토픽 자동 생성 ==

Admin -> Kafka: 토픽 생성 요청 (서비스별/에러유형별)
Kafka -> Admin: 토픽 생성 결과 응답

== Kafka 컨슈머 처리 ==

Kafka -> Application: 로그 이벤트 컨슘 (메인 서버)

@enduml
